name: Release & Deploy

on:
  push:
    tags: ["v*"]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_backend: ${{ steps.image.outputs.IMAGE_BACKEND }}
      tag: ${{ steps.vars.outputs.TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve IMAGE_BACKEND
        id: image
        shell: bash
        run: |
          set -euo pipefail
          OWNER_LOWER="$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')"
          IMAGE_BACKEND="${{ vars.IMAGE_BACKEND }}"
          if [ -z "${IMAGE_BACKEND}" ]; then
            IMAGE_BACKEND="ghcr.io/${OWNER_LOWER}/todo-backend"
          fi
          echo "IMAGE_BACKEND=${IMAGE_BACKEND}" >> "$GITHUB_OUTPUT"
          echo "Using IMAGE_BACKEND=${IMAGE_BACKEND}"

      - name: Log in to GHCR (push)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version tags
        id: vars
        run: |
          echo "TAG=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT          # v1.2.3
          echo "TAG_LATEST=latest" >> $GITHUB_OUTPUT
          echo "Building tags: ${{ steps.image.outputs.IMAGE_BACKEND }}:${GITHUB_REF_NAME} and :latest"

      - name: Build & push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ steps.image.outputs.IMAGE_BACKEND }}:${{ steps.vars.outputs.TAG }}
            ${{ steps.image.outputs.IMAGE_BACKEND }}:${{ steps.vars.outputs.TAG_LATEST }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Collect known_hosts for host
        id: kh
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euo pipefail
          KH="$(ssh-keyscan -T 10 -p 22 "$SSH_HOST" 2>/dev/null)"
          [ -n "$KH" ] || { echo "ssh-keyscan empty"; exit 1; }
          { echo "KNOWN_HOSTS<<EOF"; echo "$KH"; echo "EOF"; } >> "$GITHUB_OUTPUT"

      - name: Setup CI SSH key & known_hosts
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: ${{ steps.kh.outputs.KNOWN_HOSTS }}
          if_key_exists: replace

      - name: Deploy over SSH (forced command on server)
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          set -euo pipefail
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes "${SSH_USER}@${SSH_HOST}"

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy]
    if: ${{ needs.deploy.result == 'success' }}
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-and-push.outputs.tag }}
          name: Release ${{ needs.build-and-push.outputs.tag }}
          body: |
            Deployed successfully to production.
            Image: ${{ needs.build-and-push.outputs.image_backend }}:${{ needs.build-and-push.outputs.tag }}
