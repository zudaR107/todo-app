name: Smoke SSH

on:
  workflow_dispatch: {}  # запуск вручную

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      # 1) Соберём known_hosts на самом раннере — ровно так, как он видит хост
      - name: Collect known_hosts for host
        id: kh
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euo pipefail
          echo "Scanning $SSH_HOST:22 ..."
          KH="$(ssh-keyscan -T 5 -H -p 22 "$SSH_HOST" 2>/dev/null)"
          if [ -z "$KH" ]; then
            echo "ssh-keyscan produced no output. Check SSH_HOST or firewall." >&2
            exit 1
          fi
          echo "$KH"
          {
            echo "KNOWN_HOSTS<<'EOF'"
            echo "$KH"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # 2) Добавим приватный ключ в агент + пропишем known_hosts (с поддержкой passphrase)
      - name: Setup SSH key (with passphrase & known_hosts)
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}                  # приватный ключ deploy
          passphrase: ${{ secrets.SSH_PASSPHRASE }}    # если ключ без пароля — можно оставить пустым/не указывать
          known_hosts: ${{ steps.kh.outputs.KNOWN_HOSTS }}
          if_key_exists: replace

      # 3) Дымовой вход по SSH и проверки Docker/compose
      - name: SSH smoke
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SERVER_PROJECT_DIR: ${{ secrets.SERVER_PROJECT_DIR }}
        run: |
          set -euo pipefail
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p 22 "${SSH_USER}@${SSH_HOST}" '
            set -euo pipefail
            echo "User: $(whoami)"
            echo "Host: $(hostname -f)"
            echo "ID:   $(id)"
            which docker
            docker --version
            if docker compose version >/dev/null 2>&1; then
              docker compose version
            elif command -v docker-compose >/dev/null 2>&1; then
              docker-compose version
            else
              echo "Docker Compose not found" >&2
              exit 1
            fi
            ls -la "'"${SERVER_PROJECT_DIR}"'"
          '
